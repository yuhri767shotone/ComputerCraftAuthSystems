-- Client Authentication Script fix v5

-- Ensure modem is active
local modemSide = "back"
local SERVER_ID = 41  -- Replace with actual server ID
local levelRequired = 1  -- Set the level required for authentication (e.g., 1 for employee)

-- Check if the modem is connected
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found on the back!")
    return
end
rednet.open(modemSide)

-- Find the monitor
local monitors = peripheral.find("monitor")
if #monitors == 0 then
    print("No monitor found.")
    return
end
local mon = monitors[1]  -- Use the first monitor if multiple monitors are found

-- Set up monitor UI
mon.setTextScale(1)  -- Set text scale to 1
mon.setBackgroundColor(colors.black)
mon.setTextColor(colors.white)
mon.clear()

-- Function to display the welcome message
local function displayInterface()
    mon.clear()
    mon.setCursorPos(1, 1)
    mon.write("Click on the monitor to begin")
end

-- Function to show the keypad
local function showKeypad()
    mon.clear()
    mon.setCursorPos(5, 2)
    mon.write("Enter Employee ID:")
    mon.setCursorPos(5, 4)
    mon.write("[0] [1] [2] [3] [4]")
    mon.setCursorPos(5, 5)
    mon.write("[5] [6] [7] [8] [9]")
    mon.setCursorPos(5, 6)
    mon.write("[Enter] [Clear] [Backspace]")
end

-- Store buttons and their coordinates
local buttons = {}

-- Function to create buttons
local function setButton(name, func, xmin, xmax, ymin, ymax)
    buttons[name] = {
        func = func,
        xmin = xmin,
        xmax = xmax,
        ymin = ymin,
        ymax = ymax,
        active = false
    }
end

-- Function to handle button click events
local function checkClick(x, y)
    for name, button in pairs(buttons) do
        if x >= button.xmin and x <= button.xmax and y >= button.ymin and y <= button.ymax then
            button.func()
            return true
        end
    end
    return false
end

-- Function to fill a button on the screen
local function fillButton(name, color)
    local button = buttons[name]
    mon.setBackgroundColor(color)
    local xCenter = math.floor((button.xmax + button.xmin - string.len(name)) / 2) + 1
    local yCenter = math.floor((button.ymin + button.ymax) / 2)

    for y = button.ymin, button.ymax do
        for x = button.xmin, button.xmax do
            mon.setCursorPos(x, y)
            if y == yCenter and x == xCenter then
                mon.write(name)
            else
                mon.write(" ")
            end
        end
    end
end

-- Create buttons and set their positions
setButton("0", function() handleKeyInput("0") end, 5, 9, 4, 5)
setButton("1", function() handleKeyInput("1") end, 10, 14, 4, 5)
setButton("2", function() handleKeyInput("2") end, 15, 19, 4, 5)
setButton("3", function() handleKeyInput("3") end, 5, 9, 5, 6)
setButton("4", function() handleKeyInput("4") end, 10, 14, 5, 6)
setButton("5", function() handleKeyInput("5") end, 15, 19, 5, 6)
setButton("6", function() handleKeyInput("6") end, 5, 9, 6, 7)
setButton("7", function() handleKeyInput("7") end, 10, 14, 6, 7)
setButton("8", function() handleKeyInput("8") end, 15, 19, 6, 7)
setButton("9", function() handleKeyInput("9") end, 20, 24, 6, 7)
setButton("Enter", function() submitEmployeeID() end, 5, 9, 7, 8)
setButton("Clear", function() clearEmployeeID() end, 10, 14, 7, 8)
setButton("Backspace", function() backspaceEmployeeID() end, 15, 19, 7, 8)

-- Display the interface when the program starts
displayInterface()

-- Employee ID input tracking
local employeeID = ""

-- Function to handle key inputs
local function handleKeyInput(key)
    employeeID = employeeID .. key
    mon.setCursorPos(5, 8)
    mon.write("ID: " .. employeeID)
end

-- Function to clear the Employee ID
local function clearEmployeeID()
    employeeID = ""
    mon.setCursorPos(5, 8)
    mon.write("ID: " .. employeeID)
end

-- Function to handle backspace
local function backspaceEmployeeID()
    employeeID = employeeID:sub(1, -2)
    mon.setCursorPos(5, 8)
    mon.write("ID: " .. employeeID)
end

-- Function to submit the Employee ID
local function submitEmployeeID()
    rednet.send(SERVER_ID, employeeID)

    -- Wait for the server's response
    local senderId, response = rednet.receive(5)

    -- Process the server's response
    if response == "AUTH_SUCCESS" then
        print("Authentication successful!")
        mon.clear()
        mon.setCursorPos(5, 3)
        mon.write("Authenticated as " .. employeeID)
    elseif response == "AUTH_DENIED" then
        print("Access Denied.")
        mon.clear()
        mon.setCursorPos(5, 3)
        mon.write("Access Denied.")
    else
        print("Authentication Failed.")
        mon.clear()
        mon.setCursorPos(5, 3)
        mon.write("Authentication Failed.")
    end
end

-- Handle clicks on the monitor
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    if checkClick(x, y) then
        -- A button was clicked
    end
end
