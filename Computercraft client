-- Authentication Client (Keypad for Employee ID)
local modemSide = "back"  -- The side where the modem is connected
local redstoneSide = "front"  -- The side where redstone is powered
local SERVER_ID = 41  -- ID of the authentication server
local levelRequired = 1  -- Employee level (for example)

-- Ensure modem is active
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found!")
    return
end
rednet.open(modemSide)

-- Detect monitor
local monitor = nil
for _, side in pairs(peripheral.getNames()) do
    if peripheral.getType(side) == "monitor" then
        monitor = peripheral.wrap(side)
        break
    end
end

-- Display welcome screen
local function displayInterface()
    if monitor then
        monitor.setTextScale(1)
        monitor.clear()
        monitor.setCursorPos(5, 3)
        monitor.write("Click on the monitor to begin")
    end
end

-- Function to show keypad
local function showKeypad()
    if monitor then
        monitor.clear()
        monitor.setCursorPos(5, 2)
        monitor.write("Enter Employee ID:")
        monitor.setCursorPos(5, 4)
        monitor.write("[0] [1] [2] [3] [4]")
        monitor.setCursorPos(5, 5)
        monitor.write("[5] [6] [7] [8] [9]")
        monitor.setCursorPos(5, 6)
        monitor.write("[Enter] [Clear] [Backspace]")
    end
end

-- Function to handle input
local function getEmployeeID()
    local input = ""
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")

        -- Check for button clicks and build input
        if event == "monitor_touch" then
            if x >= 5 and x <= 9 and y == 4 then input = input .. "0" end
            if x >= 10 and x <= 14 and y == 4 then input = input .. "1" end
            if x >= 15 and x <= 19 and y == 4 then input = input .. "2" end
            if x >= 5 and x <= 9 and y == 5 then input = input .. "3" end
            if x >= 10 and x <= 14 and y == 5 then input = input .. "4" end
            if x >= 15 and x <= 19 and y == 5 then input = input .. "5" end
            if x >= 5 and x <= 9 and y == 6 then input = input .. "6" end
            if x >= 10 and x <= 14 and y == 6 then input = input .. "7" end
            if x >= 15 and x <= 19 and y == 6 then input = input .. "8" end
            if x >= 20 and x <= 24 and y == 6 then input = input .. "9" end
            if x >= 5 and x <= 9 and y == 7 then return input end
        end
    end
end

-- Function to power redstone
local function powerRedstone()
    if peripheral.isPresent(redstoneSide) then
        redstone.setOutput(redstoneSide, true)  -- Power redstone
        sleep(1)  -- Keep it powered for 1 second
        redstone.setOutput(redstoneSide, false)  -- Turn off redstone
    else
        print("Error: No redstone on the specified side!")
    end
end

-- Show the initial interface and wait for click
displayInterface()

-- Wait for the player to click to begin
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    if event == "monitor_touch" then
        showKeypad()
        local employeeID = getEmployeeID()
        print("Employee ID entered: " .. employeeID)

        -- Send employee ID to the server for authentication
        rednet.send(SERVER_ID, employeeID)

        -- Wait for server response
        local senderId, response = rednet.receive(5)

        -- Process response
        if response then
            if response:find("AUTH_SUCCESS:") then
                local rank = response:match("AUTH_SUCCESS:(.+)")
                print("Authentication Successful! Rank: " .. rank)

                if monitor then
                    monitor.clear()
                    monitor.setCursorPos(5, 3)
                    monitor.write("Welcome, Employee ID: " .. employeeID)
                    monitor.setCursorPos(5, 4)
                    monitor.write("Rank: " .. rank)
                end

                -- Power redstone when authentication is successful
                powerRedstone()

            elseif response == "AUTH_DENIED" then
                print("Access Denied.")
                if monitor then
                    monitor.clear()
                    monitor.setCursorPos(5, 3)
                    monitor.write("Access Denied.")
                end
            else
                print("Authentication Failed.")
                if monitor then
                    monitor.clear()
                    monitor.setCursorPos(5, 3)
                    monitor.write("Authentication Failed.")
                end
            end
        else
            print("Unknown response received.")
        end
    end
end
