-- Authentication Client (Keypad for Employee ID) v.4.5.1
local modemSide = "back"
local SERVER_ID = 41
local levelRequired = 1  -- Employee level (for example)

-- Ensure modem is active
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found on the back!")
    return
end
rednet.open(modemSide)

-- Detect monitor
local monitors = {peripheral.find("monitor")}
local mon = {}
for funcName,_ in pairs(monitors[1]) do
    mon[funcName] = function(...)
        for i=1,#monitors-1 do monitors[i][funcName](unpack(arg)) end
        return monitors[#monitors][funcName](unpack(arg))
    end
end

mon.setTextScale(1)
mon.setTextColor(colors.white)
local button = {}
mon.setBackgroundColor(colors.black)

-- Function to clear the button table
function clearTable()
    button = {}
end

-- Set the button details
function setButton(name, buttonOn)
    button[name]["active"] = buttonOn
    screen()
end

-- Set button properties
function setTable(name, func, param, xmin, xmax, ymin, ymax)
    button[name] = {}
    button[name]["func"] = func
    button[name]["active"] = false
    button[name]["param"] = param
    button[name]["xmin"] = xmin
    button[name]["ymin"] = ymin
    button[name]["xmax"] = xmax
    button[name]["ymax"] = ymax
end

-- Function for a button's action
function funcName()
    print("You clicked the button.")
end

-- Fill the button table with dynamic placement
function fillTable()
    local w, h = mon.getSize()  -- Get monitor size
    local buttonWidth = math.floor(w / 4)  -- Divide the screen into 4 columns for buttons
    local buttonHeight = math.floor(h / 5)  -- Divide the screen into 5 rows for buttons

    -- Set buttons in dynamic positions based on screen size
    setTable("1", funcName, "1", 5, buttonWidth, 4, buttonHeight)
    setTable("2", funcName, "2", buttonWidth + 1, buttonWidth * 2, 4, buttonHeight)
    setTable("3", funcName, "3", buttonWidth * 2 + 1, buttonWidth * 3, 4, buttonHeight)
    setTable("4", funcName, "4", 5, buttonWidth, 7, buttonHeight * 2)
    setTable("5", funcName, "5", buttonWidth + 1, buttonWidth * 2, 7, buttonHeight * 2)
    setTable("6", funcName, "6", buttonWidth * 2 + 1, buttonWidth * 3, 7, buttonHeight * 2)
    setTable("7", funcName, "7", 5, buttonWidth, 10, buttonHeight * 3)
    setTable("8", funcName, "8", buttonWidth + 1, buttonWidth * 2, 10, buttonHeight * 3)
    setTable("9", funcName, "9", buttonWidth * 2 + 1, buttonWidth * 3, 10, buttonHeight * 3)
    setTable("0", funcName, "0", buttonWidth + 1, buttonWidth * 2, 13, buttonHeight * 4)

    -- Adding an "Exit" button
    setTable("Exit", exitKeypad, "", 5, buttonWidth * 3, h - 3, h)
end

-- Fill button text on screen
function fill(text, color, bData)
    mon.setBackgroundColor(color)
    local yspot = math.floor((bData["ymin"] + bData["ymax"]) / 2)
    local xspot = math.floor((bData["xmax"] - bData["xmin"] - string.len(text)) / 2) + 1
    for j = bData["ymin"], bData["ymax"] do
        mon.setCursorPos(bData["xmin"], j)
        if j == yspot then
            for k = 0, bData["xmax"] - bData["xmin"] - string.len(text) + 1 do
                if k == xspot then
                    mon.write(text)
                else
                    mon.write(" ")
                end
            end
        else
            for i = bData["xmin"], bData["xmax"] do
                mon.write(" ")
            end
        end
    end
    mon.setBackgroundColor(colors.black)
end

-- Draw the screen and display buttons
function screen()
    local currColor
    for name, data in pairs(button) do
        local on = data["active"]
        if on == true then currColor = colors.lime else currColor = colors.red end
        fill(name, currColor, data)
    end
end

-- Toggle button states
function toggleButton(name)
    button[name]["active"] = not button[name]["active"]
    screen()
end

-- Flash button color
function flash(name)
    toggleButton(name)
    screen()
    sleep(0.15)
    toggleButton(name)
    screen()
end

-- Check if the touch was within a button area
function checkxy(x, y)
    for name, data in pairs(button) do
        if y >= data["ymin"] and y <= data["ymax"] then
            if x >= data["xmin"] and x <= data["xmax"] then
                if data["param"] == "" then
                    data["func"]()
                else
                    data["func"](data["param"])
                end
                return true
            end
        end
    end
    return false
end

-- Display the heading
function heading(text)
    w, h = mon.getSize()
    mon.setCursorPos((w - strin
