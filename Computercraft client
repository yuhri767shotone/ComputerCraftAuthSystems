-- v4 Authentication Client (Keypad for Employee ID)
local modemSide = "back"
local SERVER_ID = 41
local levelRequired = 1  -- Employee level (for example)

-- Ensure modem is active
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found on the back!")
    return
end
rednet.open(modemSide)

-- Detect monitor
local monitor = nil
for _, side in pairs(peripheral.getNames()) do
    if peripheral.getType(side) == "monitor" then
        monitor = peripheral.wrap(side)
        break
    end
end

-- Function to adjust keypad layout based on monitor size
local function getKeypadLayout()
    local width, height = monitor.getSize()
    local keypadWidth = 5
    local keypadHeight = 5

    -- Adjust to fit within the screen size
    if width < 30 then keypadWidth = 3 end
    if height < 10 then keypadHeight = 3 end

    return keypadWidth, keypadHeight
end

-- Display welcome screen
local function displayInterface()
    if monitor then
        monitor.setTextScale(1)
        monitor.clear()
        monitor.setCursorPos(5, 3)
        monitor.write("Click on the monitor to begin")
    end
end

-- Function to show keypad
local function showKeypad()
    local keypadWidth, keypadHeight = getKeypadLayout()

    if monitor then
        monitor.clear()
        monitor.setCursorPos(5, 2)
        monitor.write("Enter Employee ID:")

        -- Buttons in a grid (5x3 or smaller based on screen size)
        local buttons = {
            {"1", "2", "3", "Enter"},
            {"4", "5", "6", "Clear"},
            {"7", "8", "9", "Backspace"},
            {"0"}
        }

        -- Dynamically adjust positions based on monitor size
        local buttonX, buttonY = 5, 4
        for i, row in ipairs(buttons) do
            for j, button in ipairs(row) do
                monitor.setCursorPos(buttonX + (j - 1) * 6, buttonY + (i - 1) * 2)
                monitor.write("[" .. button .. "]")
            end
        end
    end
end

-- Function to handle input
local function getEmployeeID()
    local input = ""
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")
        
        -- Get the monitor size for dynamic button areas
        local keypadWidth, keypadHeight = getKeypadLayout()

        -- Check for button clicks and build input
        if event == "monitor_touch" then
            -- Handle number and action buttons
            if x >= 5 and x <= 10 and y == 4 then input = input .. "1" end
            if x >= 11 and x <= 16 and y == 4 then input = input .. "2" end
            if x >= 17 and x <= 22 and y == 4 then input = input .. "3" end
            if x >= 5 and x <= 10 and y == 5 then input = input .. "4" end
            if x >= 11 and x <= 16 and y == 5 then input = input .. "5" end
            if x >= 17 and x <= 22 and y == 5 then input = input .. "6" end
            if x >= 5 and x <= 10 and y == 6 then input = input .. "7" end
            if x >= 11 and x <= 16 and y == 6 then input = input .. "8" end
            if x >= 17 and x <= 22 and y == 6 then input = input .. "9" end
            if x >= 5 and x <= 10 and y == 7 then input = input .. "0" end
            if x >= 11 and x <= 16 and y == 7 then return input end  -- "Enter"
            if x >= 17 and x <= 22 and y == 7 then input = "" end  -- "Clear"
            if x >= 23 and x <= 28 and y == 6 then input = input:sub(1, -2) end  -- "Backspace"
        end
    end
end

-- Show the initial interface and wait for click
displayInterface()

-- Wait for the player to click to begin
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    if event == "monitor_touch" then
        showKeypad()
        local employeeID = getEmployeeID()
        print("Employee ID entered: " .. employeeID)

        -- Send employee ID to the server for authentication
        rednet.send(SERVER_ID, employeeID)

        -- Wait for server response
        local senderId, response = rednet.receive(5)

        -- Process response
        if response and response:find("AUTH_SUCCESS:") then
            local rank = response:match("AUTH_SUCCESS:(.+)")
            print("Authentication Successful! Rank: " .. rank)

            if monitor then
                monitor.clear()
                monitor.setCursorPos(5, 3)
                monitor.write("Welcome, Employee ID: " .. employeeID)
                monitor.setCursorPos(5, 4)
                monitor.write("Rank: " .. rank)
            end
        elseif response == "AUTH_DENIED" then
            print("Access Denied.")
            if monitor then
                monitor.clear()
                monitor.setCursorPos(5, 3)
                monitor.write("Access Denied.")
            end
        else
            print("Authentication Failed.")
            if monitor then
                monitor.clear()
                monitor.setCursorPos(5, 3)
                monitor.write("Authentication Failed.")
            end
        end
    end
end
