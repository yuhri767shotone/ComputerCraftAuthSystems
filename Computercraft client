-- Client Authentication Script v5.2(snapshot)

-- Ensure modem is active
local modemSide = "back"
local SERVER_ID = 41  -- Replace with actual server ID
local levelRequired = 1  -- Set the level required for authentication (e.g., 1 for employee)

-- Check if the modem is connected
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found on the back!")
    return
end
rednet.open(modemSide)

-- Find the monitor
local monitor = peripheral.find("monitor")
if not monitor then
    print("No monitor found.")
    return
end

-- Set up monitor UI
monitor.setTextScale(1)  -- Set text scale to 1
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)
monitor.clear()

-- Function to display the welcome message
local function displayInterface()
    monitor.clear()
    monitor.setCursorPos(1, 1)
    monitor.write("Click on the monitor to begin")
end

-- Function to show the keypad
local function showKeypad()
    monitor.clear()
    monitor.setCursorPos(5, 2)
    monitor.write("Enter Employee ID:")
    monitor.setCursorPos(5, 4)
    monitor.write("[0] [1] [2] [3] [4]")
    monitor.setCursorPos(5, 5)
    monitor.write("[5] [6] [7] [8] [9]")
    monitor.setCursorPos(5, 6)
    monitor.write("[Enter] [Clear] [Backspace]")
end

-- Store buttons and their coordinates
local buttons = {}

-- Function to create buttons
local function setButton(name, func, xmin, xmax, ymin, ymax)
    buttons[name] = {
        func = func,
        xmin = xmin,
        xmax = xmax,
        ymin = ymin,
        ymax = ymax,
        active = false
    }
end

-- Function to handle button click events
local function checkClick(x, y)
    for name, button in pairs(buttons) do
        if x >= button.xmin and x <= button.xmax and y >= button.ymin and y <= button.ymax then
            button.func()
            return true
        end
    end
    return false
end

-- Function to fill a button on the screen
local function fillButton(name, color)
    local button = buttons[name]
    monitor.setBackgroundColor(color)
    local xCenter = math.floor((button.xmax + button.xmin - string.len(name)) / 2) + 1
    local yCenter = math.floor((button.ymin + button.ymax) / 2)

    for y = button.ymin, button.ymax do
        for x = button.xmin, button.xmax do
            monitor.setCursorPos(x, y)
            if y == yCenter and x == xCenter then
                monitor.write(name)
            else
                monitor.write(" ")
            end
        end
    end
end

-- Create buttons and set their positions
setButton("0", function() handleKeyInput("0") end, 5, 9, 4, 5)
setButton("1", function() handleKeyInput("1") end, 10, 14, 4, 5)
setButton("2", function() handleKeyInput("2") end, 15, 19, 4, 5)
setButton("3", function() handleKeyInput("3") end, 5, 9, 5, 6)
setButton("4", function() handleKeyInput("4") end, 10, 14, 5, 6)
setButton("5", function() handleKeyInput("5") end, 15, 19, 5, 6)
setButton("6", function() handleKeyInput("6") end, 5, 9, 6, 7)
setButton("7", function() handleKeyInput("7") end, 10, 14, 6, 7)
setButton("8", function() handleKeyInput("8") end, 15, 19, 6, 7)
setButton("9", function() handleKeyInput("9") end, 20, 24, 6, 7)
setButton("Clear", function() handleClearInput() end, 5, 9, 7, 8)
setButton("Enter", function() handleSubmit() end, 10, 14, 7, 8)
setButton("Backspace", function() handleBackspace() end, 15, 19, 7, 8)

-- Handle input
local input = ""

function handleKeyInput(key)
    input = input .. key
    print("Current input: " .. input)
    showKeypad() -- Re-display keypad with updated input
end

function handleClearInput()
    input = ""
    print("Input cleared.")
    showKeypad() -- Re-display keypad
end

function handleBackspace()
    input = input:sub(1, -2)
    print("Input after backspace: " .. input)
    showKeypad() -- Re-display keypad
end

function handleSubmit()
    print("Submitted Employee ID: " .. input)
    -- Send the input to the server for authentication
    rednet.send(SERVER_ID, input)
    
    -- Wait for server response
    local senderId, response = rednet.receive(5)
    
    if response == "AUTH_SUCCESS" then
        print("Authentication successful.")
        -- Add further handling here, e.g., display success message on monitor
    elseif response == "AUTH_DENIED" then
        print("Authentication failed.")
        -- Add further handling here, e.g., display failure message on monitor
    else
        print("Unknown response.")
    end
end

-- Wait for the player to click to begin
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    if event == "monitor_touch" then
        if checkClick(x, y) then
            -- Successfully handled button click
        end
    end
end
