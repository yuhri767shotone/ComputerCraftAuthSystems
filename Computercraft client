-- Client Authentication Script

local modemSide = "back"
local SERVER_ID = 41  -- Replace with the actual server ID
local levelRequired = 1  -- Set the level required for authentication (e.g., 1 for employee)

-- Check if the modem is connected
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found on the back!")
    return
end
rednet.open(modemSide)

-- Find the monitor
local monitor = peripheral.find("monitor")
if not monitor then
    print("No monitor found.")
    return
end

-- Set up monitor UI
monitor.setTextScale(1)
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)
monitor.clear()

-- Function to display the welcome message
local function displayInterface()
    monitor.clear()
    monitor.setCursorPos(1, 1)
    monitor.write("Click on the monitor to begin")
end

-- Function to show the keypad with visible numbers on buttons
local function showKeypad()
    monitor.clear()
    monitor.setCursorPos(5, 2)
    monitor.write("Enter Employee ID:")
    
    -- Display number buttons with labels
    local buttons = {
        { "1", 5, 9, 5, 6 },
        { "2", 10, 14, 5, 6 },
        { "3", 15, 19, 5, 6 },
        { "4", 5, 9, 6, 7 },
        { "5", 10, 14, 6, 7 },
        { "6", 15, 19, 6, 7 },
        { "7", 5, 9, 7, 8 },
        { "8", 10, 14, 7, 8 },
        { "9", 15, 19, 7, 8 },
        { "0", 10, 14, 8, 9 },
        { "Clear", 5, 9, 8, 9 },
        { "Backspace", 15, 19, 8, 9 },
        { "Enter", 10, 14, 9, 10 }
    }
    
    -- Draw the buttons
    for _, btn in ipairs(buttons) do
        local text = btn[1]
        local xmin, xmax, ymin, ymax = btn[2], btn[3], btn[4], btn[5]
        fillButton(xmin, xmax, ymin, ymax, text)
    end
end

-- Function to fill buttons with numbers or text
function fillButton(xmin, xmax, ymin, ymax, text)
    local xCenter = math.floor((xmax + xmin - string.len(text)) / 2) + 1
    local yCenter = math.floor((ymin + ymax) / 2)

    for y = ymin, ymax do
        for x = xmin, xmax do
            monitor.setCursorPos(x, y)
            if y == yCenter and x == xCenter then
                monitor.write(text)
            else
                monitor.write(" ")
            end
        end
    end
end

-- Store input
local input = ""

-- Handle the click for input
function handleKeyInput(key)
    input = input .. key
    print("Current input: " .. input)
    showKeypad() -- Re-display keypad with updated input
end

-- Handle the backspace
function handleBackspace()
    input = input:sub(1, -2)
    print("Input after backspace: " .. input)
    showKeypad() -- Re-display keypad
end

-- Handle clear input
function handleClearInput()
    input = ""
    print("Input cleared.")
    showKeypad() -- Re-display keypad
end

-- Handle submit (send the input to the server)
function handleSubmit()
    print("Submitted Employee ID: " .. input)
    -- Send the input to the server for authentication
    rednet.send(SERVER_ID, input)
    
    -- Wait for server response
    local senderId, response = rednet.receive(5)
    
    if response then
        local authStatus, rank = response:match("^(%w+):(.+)$")
        
        if authStatus == "AUTH_SUCCESS" then
            if rank == "1" then
                print("Authentication successful. Rank 1 employee.")
            elseif rank == "2" then
                print("Authentication successful. Rank 2 employee.")
            else
                print("Authentication successful, but with different rank.")
            end
        elseif authStatus == "AUTH_DENIED" then
            print("Authentication failed. Employee ID not found or rank mismatch.")
        else
            print("Unknown response.")
        end
    end
end

-- Button regions and interactions
local buttonActions = {
    ["0"] = function() handleKeyInput("0") end,
    ["1"] = function() handleKeyInput("1") end,
    ["2"] = function() handleKeyInput("2") end,
    ["3"] = function() handleKeyInput("3") end,
    ["4"] = function() handleKeyInput("4") end,
    ["5"] = function() handleKeyInput("5") end,
    ["6"] = function() handleKeyInput("6") end,
    ["7"] = function() handleKeyInput("7") end,
    ["8"] = function() handleKeyInput("8") end,
    ["9"] = function() handleKeyInput("9") end,
    ["Clear"] = handleClearInput,
    ["Backspace"] = handleBackspace,
    ["Enter"] = handleSubmit
}

-- Function to check if the user clicked a button
function checkClick(x, y)
    local buttons = {
        { "1", 5, 9, 5, 6 },
        { "2", 10, 14, 5, 6 },
        { "3", 15, 19, 5, 6 },
        { "4", 5, 9, 6, 7 },
        { "5", 10, 14, 6, 7 },
        { "6", 15, 19, 6, 7 },
        { "7", 5, 9, 7, 8 },
        { "8", 10, 14, 7, 8 },
        { "9", 15, 19, 7, 8 },
        { "0", 10, 14, 8, 9 },
        { "Clear", 5, 9, 8, 9 },
        { "Backspace", 15, 19, 8, 9 },
        { "Enter", 10, 14, 9, 10 }
    }
    
    for _, btn in ipairs(buttons) do
        local text = btn[1]
        local xmin, xmax, ymin, ymax = btn[2], btn[3], btn[4], btn[5]
        
        if x >= xmin and x <= xmax and y >= ymin and y <= ymax then
            -- Call the associated function for the button
            if buttonActions[text] then
                buttonActions[text]()
                return true
            end
        end
    end
    return false
end

-- Wait for the player to click to begin
while true do
    local event, side, x, y = os.pullEvent("monitor_touch")
    if event == "monitor_touch" then
        checkClick(x, y)
    end
end
